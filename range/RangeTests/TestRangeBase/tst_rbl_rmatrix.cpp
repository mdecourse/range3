#include <rblib.h>

#include "tst_rbl_rmatrix.h"

void tst_RRMatrix::transpose() const
{
    RRMatrix A(2,3);
    A[0][0] = 1.0; A[0][1] = 2.0; A[0][2] = 3.0;
    A[1][0] = 4.0; A[1][1] = 5.0; A[1][2] = 6.0;
    RRMatrix B(A);

    A.transpose();

    for (uint i=0;i<A.getNRows();i++)
    {
        for (uint j=0;j<A.getNColumns();j++)
        {
            QVERIFY(R_D_ARE_SAME(A[i][j],B[j][i]));
        }
    }
}

void tst_RRMatrix::invert() const
{
    // 2x2 marix
    RRMatrix A2(2,2);
    RRMatrix X2(2,2);
    RRMatrix E2;
    E2.setIdentity(2);
    A2[0][0] =  3.0; A2[0][1] = 2.0;
    A2[1][0] = -2.0; A2[1][1] = 3.0;
    RRMatrix iA2(A2);
    iA2.invert();

    RRMatrix::mlt(A2,iA2,X2);

    QVERIFY(X2 == E2);

    // 3x3 marix
    RRMatrix A3(3,3);
    RRMatrix X3(3,3);
    RRMatrix E3;
    E3.setIdentity(3);
    A3[0][0] =  3.0; A3[0][1] =  2.0; A3[0][2] = 1.0;
    A3[1][0] = -2.0; A3[1][1] =  3.0; A3[1][2] = 2.0;
    A3[2][0] = -1.0; A3[2][1] = -2.0; A3[2][2] = 3.0;
    RRMatrix iA3(A3);
    iA3.invert();

    RRMatrix::mlt(A3,iA3,X3);

    QVERIFY(X3 == E3);

    // 4x4 marix
    RRMatrix A4(4,4);
    RRMatrix X4(4,4);
    RRMatrix E4;
    E4.setIdentity(4);
    A4[0][0] =  3.0; A4[0][1] =  2.0; A4[0][2] =  1.0; A4[0][3] = 0.0;
    A4[1][0] = -2.0; A4[1][1] =  3.0; A4[1][2] =  2.0; A4[1][3] = 1.0;
    A4[2][0] = -1.0; A4[2][1] = -2.0; A4[2][2] =  3.0; A4[2][3] = 2.0;
    A4[3][0] =  0.0; A4[3][1] = -1.0; A4[3][2] = -2.0; A4[3][3] = 3.0;
    RRMatrix iA4(A4);
    iA4.invert();

    RRMatrix::mlt(A4,iA4,X4);

    QVERIFY(X4 == E4);
}

void tst_RRMatrix::decomposeToLU() const
{
    RRMatrix A(3,3);
    A[0][0] = 3.0; A[0][1] = 2.0; A[0][2] = 1.0;
    A[1][0] = 2.0; A[1][1] = 3.0; A[1][2] = 2.0;
    A[2][0] = 1.0; A[2][1] = 2.0; A[2][2] = 3.0;

    RRMatrix LU(3,3);
    LU[0][0] = 3.0;     LU[0][1] = 2.0;     LU[0][2] = 1.0;
    LU[1][0] = 2.0/3.0; LU[1][1] = 5.0/3.0; LU[1][2] = 4.0/3.0;
    LU[2][0] = 1.0/3.0; LU[2][1] = 0.8;     LU[2][2] = 1.6;

    A.decomposeToLU();

    QVERIFY(A == LU);
}

void tst_RRMatrix::getDeterminant() const
{
    RRMatrix A4(4,4);
    A4[0][0] =  3.0; A4[0][1] =  2.0; A4[0][2] =  1.0; A4[0][3] = 0.0;
    A4[1][0] = -2.0; A4[1][1] =  3.0; A4[1][2] =  2.0; A4[1][3] = 1.0;
    A4[2][0] = -1.0; A4[2][1] = -2.0; A4[2][2] =  3.0; A4[2][3] = 2.0;
    A4[3][0] =  0.0; A4[3][1] = -1.0; A4[3][2] = -2.0; A4[3][3] = 3.0;

    QVERIFY(R_D_ARE_SAME(A4.getDeterminant(),216.0));
}

void tst_RRMatrix::getSummedRows() const
{
    RRMatrix A4(4,4);
    A4[0][0] =  3.0; A4[0][1] =  2.0; A4[0][2] =  1.0; A4[0][3] = 0.0;
    A4[1][0] = -2.0; A4[1][1] =  3.0; A4[1][2] =  2.0; A4[1][3] = 1.0;
    A4[2][0] = -1.0; A4[2][1] = -2.0; A4[2][2] =  3.0; A4[2][3] = 2.0;
    A4[3][0] =  0.0; A4[3][1] = -1.0; A4[3][2] = -2.0; A4[3][3] = 3.0;

    RRVector sv = A4.getSummedRows();
    QVERIFY(sv.getNRows() == 4);
    QVERIFY(R_D_ARE_SAME(sv[0],6.0));
    QVERIFY(R_D_ARE_SAME(sv[1],4.0));
    QVERIFY(R_D_ARE_SAME(sv[2],2.0));
    QVERIFY(R_D_ARE_SAME(sv[3],0.0));
}

void tst_RRMatrix::getBlock() const
{
    RRMatrix A4(4,4);
    A4[0][0] =  3.0; A4[0][1] =  2.0; A4[0][2] =  1.0; A4[0][3] = 0.0;
    A4[1][0] = -2.0; A4[1][1] =  3.0; A4[1][2] =  2.0; A4[1][3] = 1.0;
    A4[2][0] = -1.0; A4[2][1] = -2.0; A4[2][2] =  3.0; A4[2][3] = 2.0;
    A4[3][0] =  0.0; A4[3][1] = -1.0; A4[3][2] = -2.0; A4[3][3] = 3.0;

    RRMatrix A2(2,2);

    RRMatrix B2(2,2);
    B2[0][0] =  3.0; B2[0][1] = 2.0;
    B2[1][0] = -2.0; B2[1][1] = 3.0;

    A2 = A4.getBlock(1,2,1,2);

    QVERIFY(A2 == B2);
}

void tst_RRMatrix::setBlock() const
{
    RRMatrix A4(4,4);
    A4[0][0] =  3.0; A4[0][1] =  2.0; A4[0][2] =  1.0; A4[0][3] = 0.0;
    A4[1][0] = -2.0; A4[1][1] =  3.0; A4[1][2] =  2.0; A4[1][3] = 1.0;
    A4[2][0] = -1.0; A4[2][1] = -2.0; A4[2][2] =  3.0; A4[2][3] = 2.0;
    A4[3][0] =  0.0; A4[3][1] = -1.0; A4[3][2] = -2.0; A4[3][3] = 3.0;

    RRMatrix B4(4,4);
    B4[0][0] =  3.0; B4[0][1] =  2.0; B4[0][2] =  1.0; B4[0][3] = 0.0;
    B4[1][0] = -2.0; B4[1][1] = -9.0; B4[1][2] = -7.0; B4[1][3] = 1.0;
    B4[2][0] = -1.0; B4[2][1] =  7.0; B4[2][2] = -9.0; B4[2][3] = 2.0;
    B4[3][0] =  0.0; B4[3][1] = -1.0; B4[3][2] = -2.0; B4[3][3] = 3.0;

    RRMatrix A2(2,2);
    A2[0][0] = -9.0; A2[0][1] = -7.0;
    A2[1][0] =  7.0; A2[1][1] = -9.0;

    A4.setBlock(A2,1,1);

    QVERIFY(A4 == B4);
}

void tst_RRMatrix::trace() const
{
    RRMatrix A4(4,4);
    A4[0][0] =  3.0; A4[0][1] =  2.0; A4[0][2] =  1.0; A4[0][3] = 0.0;
    A4[1][0] = -2.0; A4[1][1] =  3.0; A4[1][2] =  2.0; A4[1][3] = 1.0;
    A4[2][0] = -1.0; A4[2][1] = -2.0; A4[2][2] =  3.0; A4[2][3] = 2.0;
    A4[3][0] =  0.0; A4[3][1] = -1.0; A4[3][2] = -2.0; A4[3][3] = 3.0;

    QVERIFY(R_D_ARE_SAME(RRMatrix::trace(A4),12.0));
}

void tst_RRMatrix::mlt() const
{
    RRMatrix A4(4,4);
    A4[0][0] =  3.0; A4[0][1] =  2.0; A4[0][2] =  1.0; A4[0][3] = 0.0;
    A4[1][0] = -2.0; A4[1][1] =  3.0; A4[1][2] =  2.0; A4[1][3] = 1.0;
    A4[2][0] = -1.0; A4[2][1] = -2.0; A4[2][2] =  3.0; A4[2][3] = 2.0;
    A4[3][0] =  0.0; A4[3][1] = -1.0; A4[3][2] = -2.0; A4[3][3] = 3.0;

    RRVector v4(4);
    v4[0] = -1.0;
    v4[1] =  2.0;
    v4[2] = -3.0;
    v4[3] =  4.0;

    RRVector b4(4);
    b4[0] =  -2.0;
    b4[1] =   6.0;
    b4[2] =  -4.0;
    b4[3] =  16.0;

    RRVector x4(4);

    RRMatrix::mlt(A4,v4,x4);

    QVERIFY(x4 == b4);

    b4[0] =  -4.0;
    b4[1] =  12.0;
    b4[2] =  -8.0;
    b4[3] =  32.0;

    RRMatrix::mlt(A4,v4,x4,true);

    QVERIFY(x4 == b4);

    RRMatrix B4(4,4);
    B4[0][0] =   4.0; B4[0][1] =  10.0; B4[0][2] =  10.0; B4[0][3] =  4.0;
    B4[1][0] = -14.0; B4[1][1] =   0.0; B4[1][2] =   8.0; B4[1][3] = 10.0;
    B4[2][0] =  -2.0; B4[2][1] = -16.0; B4[2][2] =   0.0; B4[2][3] = 10.0;
    B4[3][0] =   4.0; B4[3][1] =  -2.0; B4[3][2] = -14.0; B4[3][3] =  4.0;

    RRMatrix X4(4,4);

    RRMatrix::mlt(A4,A4,X4);

    QVERIFY(X4 == B4);

    B4[0][0] =   8.0; B4[0][1] =  20.0; B4[0][2] =  20.0; B4[0][3] =  8.0;
    B4[1][0] = -28.0; B4[1][1] =   0.0; B4[1][2] =  16.0; B4[1][3] = 20.0;
    B4[2][0] =  -4.0; B4[2][1] = -32.0; B4[2][2] =   0.0; B4[2][3] = 20.0;
    B4[3][0] =   8.0; B4[3][1] =  -4.0; B4[3][2] = -28.0; B4[3][3] =  8.0;

    RRMatrix::mlt(A4,A4,X4,true);

    QVERIFY(X4 == B4);
}
